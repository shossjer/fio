* Fast Input Output

  Some systems make it more difficult than others to output text to a
  console. This project makes console interaction, and other stream
  operations, easier and faster.

** But why?

   * Windows need some extra care when dealing with Unicode. It does
     not help that they like to use UTF16LE (i.e. ~wchar_t~) in their
     API either.
   * Windows have additional difficulties in how it handles redirected
     streams.

** Remarks

   * Although the C++ standard seem to dictate that `from_chars`
     should round floating point values according to
     `round_to_nearest` (whatever that means), not all standard
     implementations seem to agree on that. In case of ties, some
     implementations round up, others round down, if they have
     bothered to implement the function at all that is. It might be a
     small difference in and of itself but mildly furiating when you
     need to be exact and/or target multiple platforms.

     This library always rounds floating point numbers to the closest
     representable value, or away from zero in case of ties.

** Tests

   There are some tests written to make sure that floating point
   numbers are rounded correctly but that is about it really.

** Benchmarks

   This library can be configured to build a benchmarking executable
   via the CMake option ~FIO_BUILD_BENCHMARKS~. When enabled, CMake
   will download and install third-party libraries to compare against
   but those can be disabled via the ~FIO_BUILD_~-family of options.

   Run the executable with the argument ~-l~ or ~--lists-tests~ in
   order to list all available benchmarks.

   For more details on the available commands, see the documentation
   of Catch2 (https://github.com/catchorg/Catch2).

*** Plots

    The benchmarks output ~.dump~-files (in the directory ~plot~) that
    can be plotted via ~GNU Octave~.

**** from_chars sint64

     *MSVC-19.27.29112.0*
     [[file:plot/from_chars_sint64_msvc_19.27.29112.0.png]]

     *WSL-GCC-8.4.0*
     [[file:plot/from_chars_sint64_wsl_gcc_8.4.0.png]]

     Generate the plot yourself by running something like
     #+begin_src
     ./build/fiobnc --benchmark-samples 1000 "from_chars sint64"
     octave --path ./plot --eval "plot_dump('plot/from_chars_sint64.dump');"
     #+end_src

**** to_chars sint64

     *MSVC-19.27.29112.0*
     [[file:plot/to_chars_sint64_msvc_19.27.29112.0.png]]

     *WSL-GCC-8.4.0*
     [[file:plot/to_chars_sint64_wsl_gcc_8.4.0.png]]

     Generate the plot yourself by running something like
     #+begin_src
     ./build/fiobnc --benchmark-samples 1000 "to_chars sint64"
     octave --path ./plot --eval "plot_dump('plot/to_chars_sint64.dump');"
     #+end_src

**** from_chars float32

     An in-between value is a number that lies exactly in the middle
     of two adjacent representable numbers. They have to longest
     decimal expansion that have to be supported. It is also the
     shortest number of digits an implementation have to support in
     order to be conforming.

     *MSVC-19.27.29112.0*
     [[file:plot/from_chars_float32_in_betweens_msvc_19.27.29112.0.png]]

     *WSL-GCC-8.4.0*
     [[file:plot/from_chars_float32_in_betweens_wsl_gcc_8.4.0.png]]

     Generate the plot yourself by running something like
     #+begin_src
     ./build/fiobnc --benchmark-samples 300 "from_chars float32 in-betweens"
     octave --path ./plot --eval "plot_dump('plot/from_chars_float32_in_betweens.dump');"
     #+end_src

     For platforms where `std::to_chars` is available, there is also a
     benchmark of the shortest representation of the smallest and
     largest value within each magnitude.

     *MSVC-19.27.29112.0*
     [[file:plot/from_chars_float32_shortest_msvc_19.27.29112.0.png]]

     Generate the plot yourself by running something like
     #+begin_src
     ./build/fiobnc --benchmark-samples 300 "from_chars float32 shortest"
     octave --path ./plot --eval "plot_dump('plot/from_chars_float32_shortest.dump');"
     #+end_src
